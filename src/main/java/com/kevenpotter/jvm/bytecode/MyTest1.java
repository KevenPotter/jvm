package com.kevenpotter.jvm.bytecode;

/**
 * 37.Java字节码文件结构解析
 * 38.Java字节码常量池深入剖析
 * 1.使用javap -verbose命令分析一个字节码文件时,将会分析该字节码文件的魔数、版本号、常量池、类信息、类的构造方法、类中的方法
 * 信息、类变量与成员变量等信息;
 * 2.魔数(magic number):所有的.class文件字节码文件的前四个字节都是魔数,魔数值为固定值:OxCAFEBABE
 * 3.魔数之后的4个字节为版本信息,前两个字节表示minor version(次版本号),后两个字节表示major version(主版本号).
 * 这里的版本号为00 00 00 34,换算成十进制,表示次版本号为0,主版本号为52.这里的52代表的意思是JDK8,所以,51就代表了JDK7.
 * 所以,该文件的版本号为1.8.0(这个0就是所谓的"次版本号").可以通过java -version命令来验证这一点.
 * 4.常量池(constant pool):紧接着主版本号之后的就是常量池入口(也就是第九个字节).一个Java类中定义的很多信息都是由常量池来维护
 * 和描述的,可以将常量池看作是Class文件的资源仓库,比如说Java类中定义的方法与变量信息,都是存储在常量池中.常量池中主要存储两类
 * 常量:字面量和符号引用.
 * 字面量:如文本字符串,Java中声明为final的常量值等......
 * 符号引用:如类和接口的全局限定名,字段的名称和描述符,方法的名称和描述符等......
 * 5.常量池的总体结构:Java类所对应的常量池主要由常量池数量与常量池数组(也可以说是表结构或常量表)这两部分共同构成.常量池数量紧跟在主版
 * 本号后面,占据2个字节;而常量池数组则紧跟在常量池数量之后.常量池数组与一般的数组不同的是,常量池数组中不同的元素的类型、结构
 * 都是不同的,长度当然也就不同;但是,每一种元素的第一个数据都是一个u1类型,该字节是个标志位,占据1个字节.JVM在解析常量池时,会根
 * 据这个u1类型来获取对应的元素的具体类型.值得注意的是,常量池数组中元素的个数=常量池数 - 1 (其中0暂时不使用),目的是满足某些
 * 常量池索引值的数据在特定情况下需要表达[不引用任何一个常量池]的含义;根本原因在于,索引为0也是一个常量(JVM的保留常量),只不过
 * 它不位于常量池数组(常量表)中,这个常量就对应null值;所以,常量池的索引从1而非0开始.
 * 39.透彻分析常量池常量结构与描述符
 * 6.在JVM规范中,每个变量/字段都有描述信息,描述信息的主要作用是描述字段的数据类型、方法的参数列表(包括数量、类型与顺序)与返回
 * 值.根据描述符规则,基本数据类型和代表无返回值的void类型都用一个大写字符来表示,对象类型则使用字符L加对象的全限定名称来表示.
 * 为了压缩字节码文件的体积,对于基本数据类型,JVM都只使用一个大写字母来表示,如下所示:
 * B - byte    C - char    D - double    F - float    I - int    J - long    S - short    Z - boolean    V - void    L - 对象类型
 * 如:Ljava/lang/String;
 * 7.
 */
public class MyTest1 {

    private int a = 1;

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }
}